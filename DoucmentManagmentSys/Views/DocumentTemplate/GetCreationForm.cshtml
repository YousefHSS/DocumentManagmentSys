@model List<TemplateElement>
@using DocumentFormat.OpenXml.Wordprocessing;
@using Microsoft.AspNetCore.Html
@using DocumentFormat.OpenXml
@using System.Text
@using System.Web
@{
    ViewData["Title"] = "Create Document";
}
@{
    var Editorid=0;
    IHtmlContent RunToCK(IEnumerable<Run> items)
    {
        var contentBuilder = new HtmlContentBuilder();
        foreach (var run in items)
        {
            var innerText = new HtmlContentBuilder().Append(run.InnerText);
            if (run.RunProperties != null)
            {
                if (run.RunProperties.Bold != null)
                {
                    innerText = new HtmlContentBuilder().AppendHtml("<strong>").AppendHtml(innerText).AppendHtml("</strong>");
                }
                if (run.RunProperties.Italic != null)
                {
                    innerText = new HtmlContentBuilder().AppendHtml("<em>").AppendHtml(innerText).AppendHtml("</em>");
                }
                var AdjustedFontsize = int.Parse((run.RunProperties.FontSize?.Val ?? "28")!) - 12;
                innerText = new HtmlContentBuilder().AppendHtml("<span "+ ((run.Descendants<Highlight>().Any(h => h.Val != null && h.Val == HighlightColorValues.DarkMagenta)? " contenteditable='false' class='NonEditable'   ":" contenteditable='true' " )+" style='font-size:") + (AdjustedFontsize.ToString()) + "px;'>").AppendHtml(innerText).AppendHtml("</span>");


            }
           
            contentBuilder.AppendHtml(innerText);
        }

            return contentBuilder;
       
    };
    Func<OpenXmlElement, IHtmlContent> Editor =
    @<div class="editable p-2-ni rounded-1 border-1 m-1 border" id="@(Editorid++)"   contenteditable="true">
        @if (item.Descendants<Paragraph>().Count()<=1)
        {   
            
            <p>
                @RunToCK(item.Descendants<Run>())
            </p>
                                         
        }
        else
        {                                 
            <ul>                            
                @foreach (var paragraph in item.Descendants<Paragraph>())
                {
                   
                    <li>@RunToCK(paragraph.Descendants<Run>())</li>
                }
            </ul>                                 
        }
    </div>
    ;


    Func<string, IHtmlContent> FixedTitle =
    @<div class="row">
                        <div class="col">
                            <div class="form-group m-1">
                                <h3 >@item</h3>
                            </div>
                        </div>
                    </div>;

    Func<Table, IHtmlContent> TableInputElement =
    @<table class="table-bordered border-3 table">

        @foreach (var row in @item.Elements<TableRow>())
        {
            
            <tr>
            
                @foreach (var cell in row.Elements<TableCell>())
                {
                    
                    <td>
                        @if (cell.Descendants<Highlight>().Any(h => h.Val != null && h.Val == HighlightColorValues.Magenta))
                        {
                            // This is the header cell
                            @cell.InnerText
                        }
                        else
                        {
                            @Editor(cell)
                           
                        }
                    </td>
                }
            </tr>
        }
    </table>;


}
@* //css file ref *@
<link rel="stylesheet" href="~/css/CKEDITOR.css" />
<form method="Post" asp-action="GetCreationForm" id="documentForm">
    <div id="paginationContent" class="d-flex justify-content-center">
        <input type="hidden" id="TemplateTitle" name="TemplateTitle" value="@ViewBag.TemplateTitle" />
        <input type="hidden" id="page" name="page" value="" />
        <input type="hidden" id="lastPage" name="lastPage" value="@ViewBag.CurrentPage" />

        <div class="col">
        @{ string lastTitle="";}
        @foreach (TemplateElement TE in Model)
        {
                if (TE.Elements.First() is Table || TE.Elements.First().Descendants<Table>().Any())
                {
                    
                    @FixedTitle(TE.FixedTitle);
                    Table? table = TE.Elements.First() is Table ? TE.Elements.First() as Table : TE.Elements.First().Descendants<Table>().First();
                    @TableInputElement(table);
                }
                else
                {
                    @foreach (var element in TE.Elements)
                    {

                        if (TE.FixedTitle != lastTitle)
                        {
                           
                            @FixedTitle(TE.FixedTitle);

                           
                            @Editor(element);
                            
                        }
                        else
                        {
                            //without the title
                            @Editor(element);
                        }
                        lastTitle = TE.FixedTitle;
                    }
                    if (TE.FixedTitle == "Strength")
                    {
                        <div id="strengths">

                        </div>
                            @* Display add strengh button *@
                            <input type="button" class="btn btn-primary" onclick="AddStrengthInput()" style="margin:0.5rem;" id="addStrength" value="Add Strength" />
                    }
                  
                }
            
             

        }
        </div>
    </div>

    


<!-- Pagination Controls -->
<nav aria-label="Page navigation" class="d-flex justify-content-center">
    <ul class="pagination">
        @for (int i = 1; i <= ViewBag.TotalPages; i++)
        {
                @if (ViewBag.CurrentPage == i)
                {
                    <li class="page-item active"><a class="page-link" onclick="SetPage(@i)" data-page="@i">@i</a></li>
                }else{
                      <li class="page-item"><a class="page-link" onclick="SetPage(@i)" data-page="@i">@i</a></li>
                }
              
        }
    </ul>
</nav>
</form>
@* //on last page add save button *@
@if (ViewBag.CurrentPage == ViewBag.TotalPages)
{
    <form method="post" asp-action="SaveDocument" id="SaveDocument">
        <input type="hidden" id="TemplateTitle" name="TemplateTitle" value="@ViewBag.TemplateTitle" />
        <input type="hidden" id="lastPage" name="lastPage" value="@ViewBag.CurrentPage" />
    <div class="d-flex justify-content-center">
        <input type="button" onclick="SaveDocument()" class="btn btn-primary" value="Save" />
    </div>
    </form>
}

<script  src="~/js/GetCreationForm.js" />
