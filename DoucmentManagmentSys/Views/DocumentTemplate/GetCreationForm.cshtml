@model List<TemplateElement>
@using DocumentFormat.OpenXml.Wordprocessing;
@using Microsoft.AspNetCore.Html
@using DocumentFormat.OpenXml
@using System.Text
@using System.Web
@{
    ViewData["Title"] = "Create Document";
}
@{
   string ConstructHtmlFromElements(OpenXmlElement item)
{
    var resultHTML = new StringBuilder();
    foreach (var element in item.Elements())
    {
        
        switch (element)
        {
            case Paragraph paragraph:
                
                resultHTML.AppendLine("<li>");
                foreach (var run in paragraph.Elements<Run>())
                {
                    foreach (var text in run.Elements<Text>())
                    {
                        resultHTML.Append(HttpUtility.HtmlEncode(text.Text));
                    }
                }
                resultHTML.AppendLine("</li>");
                break;
            // Add cases for other types of elements you expect, like tables, images, etc.
            // ...
            default:
                // Handle any elements that don't match the above cases
                break;
        }
        
    }
    return resultHTML.ToString();
}

    Func<OpenXmlElement, IHtmlContent> TextInputElement =

    @<div class="row">
                    <div class="col">
                        <div class="form-group m-1 p-1">
                            <input type="text" class="form-control ToBeJson TextInputElement" id="TextInput" name="TextInput" value="@item.InnerText" />
                        </div>
                    </div>
                 </div>

    ;

        Func<OpenXmlElement, IHtmlContent> TextAreaElement =

    @<div class="row">
                    <div class="col">
                        <div class="form-group m-1 p-1">
                            <textarea type="text" class="form-control ToBeJson TextAreaElement" id="TextArea" name="TextArea" >@item.InnerText</textarea>
                        </div>
                    </div>
                 </div>

    ;

    Func<string, IHtmlContent> FixedTitle =
    @<div class="row">
                        <div class="col">
                            <div class="form-group m-1">
                                <h3 >@item</h3>
                            </div>
                        </div>
                    </div>;

    Func<Table, IHtmlContent> TableInputElement =
    @<table class="table-bordered border-3 table">
                    @foreach (var row in @item.Elements<TableRow>())
        {
                        <tr>
                            @foreach (var cell in row.Elements<TableCell>())
                {
                                <td>
                                    @if (cell.Descendants<Highlight>().Any(h => h.Val != null && h.Val == HighlightColorValues.Magenta))
                        {
                            // This is the header cell (left column)
                                        @cell.InnerText
                        }
                        else
                        {
                            //if the inner Text is big or multiline, it will be displayed as a text area
                            if (cell.InnerText.Contains(Environment.NewLine) || cell.InnerText.Length > 70)
                            {
                                //for each paragraph in the text, create a line break
                                           
                                          <div class="border-2" id="editor" class="editable" contenteditable="true">
                                            <ul>
                                              
                                              @foreach (var paragraph in cell.Descendants<Paragraph>())
                                              {
                                                <li>@paragraph.InnerText</li>
                                              }
                                            </ul>
                                          </div>
                                            
                            }
                            else
                            {
                                            <input type="text" class="form-control ToBeJson TextInputElement" value="@cell.InnerText" />
                            }
                        
                        }
                                </td>
                }
                        </tr>
        }
                </table>;


}
<form method="Post" asp-action="GetCreationForm" id="documentForm">
    <div id="paginationContent" class="d-flex justify-content-center">
        <input type="hidden" id="TemplateTitle" name="TemplateTitle" value="@ViewBag.TemplateTitle" />
        <input type="hidden" id="page" name="page" value="" />
        <input type="hidden" id="lastPage" name="lastPage" value="@ViewBag.CurrentPage" />

        <div class="col">
        @{ string lastTitle="";}
        @foreach (TemplateElement TE in Model)
        {
                if (TE.Elements.First() is Table || TE.Elements.First().Descendants<Table>().Any())
                {
                    
                    @FixedTitle(TE.FixedTitle);
                    Table? table = TE.Elements.First() is Table ? TE.Elements.First() as Table : TE.Elements.First().Descendants<Table>().First();
                    @TableInputElement(table);
                }
                else
                {
                    @foreach (var element in TE.Elements)
                    {

                        if (TE.FixedTitle != lastTitle)
                        {
                           
                            @FixedTitle(TE.FixedTitle);

                            if (element.InnerText.Contains(Environment.NewLine) || element.InnerText.Length > 70)
                            {
                                @TextAreaElement(element);
                            }
                            else
                            {
                                @TextInputElement(element);
                            }
                        }
                        else
                        {
                            //without the title
                            @TextInputElement(element);
                        }
                        lastTitle = TE.FixedTitle;
                    }
                    if (TE.FixedTitle == "Strength")
                    {
                        <div id="strengths" class="row">

                        </div>
                            @* Display add strengh button *@
                            <input type="button" class="btn btn-primary" onclick="AddStrengthInput()" style="margin:0.5rem;" id="addStrength" value="Add Strength" />
                    }
                  
                }
            
             

        }
        </div>
    </div>

    


<!-- Pagination Controls -->
<nav aria-label="Page navigation" class="d-flex justify-content-center">
    <ul class="pagination">
        @for (int i = 1; i <= ViewBag.TotalPages; i++)
        {
                @if (ViewBag.CurrentPage == i)
                {
                    <li class="page-item active"><a class="page-link" onclick="SetPage(@i)" data-page="@i">@i</a></li>
                }else{
                      <li class="page-item"><a class="page-link" onclick="SetPage(@i)" data-page="@i">@i</a></li>
                }
              
        }
    </ul>
</nav>
</form>
@* //on last page add save button *@
@if (ViewBag.CurrentPage == ViewBag.TotalPages)
{
    <form method="post" asp-action="SaveDocument" id="SaveDocument">
        <input type="hidden" id="TemplateTitle" name="TemplateTitle" value="@ViewBag.TemplateTitle" />
        <input type="hidden" id="lastPage" name="lastPage" value="@ViewBag.CurrentPage" />
    <div class="d-flex justify-content-center">
        <input type="button" onclick="SaveDocument()" class="btn btn-primary" value="Save" />
    </div>
    </form>
}
<script src="~/js/GetCreationForm.js" />
